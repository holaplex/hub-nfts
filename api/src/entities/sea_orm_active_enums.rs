//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use async_graphql::Enum;
use hub_core::credits;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Enum, Copy, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "blockchain")]
pub enum Blockchain {
    #[sea_orm(string_value = "ethereum")]
    Ethereum,
    #[sea_orm(string_value = "polygon")]
    Polygon,
    #[sea_orm(string_value = "solana")]
    Solana,
}

impl From<Blockchain> for credits::Blockchain {
    fn from(value: Blockchain) -> Self {
        match value {
            Blockchain::Ethereum => credits::Blockchain::Ethereum,
            Blockchain::Polygon => credits::Blockchain::Polygon,
            Blockchain::Solana => credits::Blockchain::Solana,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Enum, Copy)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "creation_status")]
pub enum CreationStatus {
    #[sea_orm(string_value = "blocked")]
    Blocked,
    #[sea_orm(string_value = "canceled")]
    Canceled,
    #[sea_orm(string_value = "created")]
    Created,
    #[sea_orm(string_value = "failed")]
    Failed,
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "rejected")]
    Rejected,
    #[sea_orm(string_value = "queued")]
    Queued,
}

#[derive(Debug, Clone, Default, PartialEq, Eq, EnumIter, DeriveActiveEnum, Enum, Copy)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "drop_type")]
pub enum DropType {
    #[default]
    #[sea_orm(string_value = "edition")]
    Edition,
    #[sea_orm(string_value = "open")]
    Open,
}

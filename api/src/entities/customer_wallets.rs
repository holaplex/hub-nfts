//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::{entity::prelude::*, Set};

use super::sea_orm_active_enums::Blockchain;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "customer_wallets")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub customer_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub address: String,
    pub blockchain: Blockchain,
}

impl ActiveModelBehavior for ActiveModel {
    /// Will be triggered before insert / update
    fn before_save(mut self, _insert: bool) -> Result<Self, DbErr> {
        if self.address.as_ref().starts_with("0x") {
            self.address = Set(self.address.as_ref().to_lowercase());
        }

        Ok(self)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Entity {
    pub fn find_by_address(address: String) -> Select<Self> {
        if address.starts_with("0x") {
            Self::find().filter(Column::Address.like(&address))
        } else {
            Self::find().filter(Column::Address.eq(address))
        }
    }
}

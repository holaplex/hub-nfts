//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use async_graphql::{ComplexObject, Context, Result, SimpleObject};
use sea_orm::entity::prelude::*;

use super::{collections, sea_orm_active_enums::CreationStatus};
use crate::AppContext;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "collection_mints")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub collection_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub address: String,
    #[sea_orm(column_type = "Text")]
    pub owner: String,
    pub creation_status: CreationStatus,
    pub created_by: Uuid,
    pub created_at: DateTime,
}

#[derive(Clone, Debug, PartialEq, Eq, SimpleObject)]
#[graphql(complex)]
pub struct CollectionMint {
    pub id: Uuid,
    pub collection_id: Uuid,
    pub address: String,
    pub owner: String,
    pub creation_status: CreationStatus,
    pub created_by: Uuid,
    pub created_at: DateTime,
}

#[ComplexObject]
impl CollectionMint {
    async fn collection(&self, ctx: &Context<'_>) -> Result<Option<collections::Collection>> {
        let AppContext {
            collection_loader, ..
        } = ctx.data::<AppContext>()?;

        collection_loader.load_one(self.collection_id).await
    }
}

impl From<Model> for CollectionMint {
    fn from(
        Model {
            id,
            collection_id,
            address,
            owner,
            creation_status,
            created_by,
            created_at,
        }: Model,
    ) -> Self {
        Self {
            id,
            collection_id,
            address,
            owner,
            creation_status,
            created_by,
            created_at,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

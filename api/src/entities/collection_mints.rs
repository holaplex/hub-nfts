//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use async_graphql::Result;
use sea_orm::{entity::prelude::*, JoinType, QuerySelect, SelectTwo};

use super::{collections, sea_orm_active_enums::CreationStatus};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "collection_mints")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub collection_id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub address: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub owner: Option<String>,
    pub creation_status: CreationStatus,
    pub created_by: Uuid,
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(nullable)]
    pub signature: Option<String>,
    pub edition: i64,
    pub seller_fee_basis_points: i16,
    pub credits_deduction_id: Option<Uuid>,
    #[sea_orm(nullable)]
    pub compressed: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collections::Entity",
        from = "Column::CollectionId",
        to = "super::collections::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Collections,
    #[sea_orm(has_many = "super::mint_creators::Entity")]
    MintCreators,
    #[sea_orm(has_many = "super::mint_histories::Entity")]
    MintHistories,
    #[sea_orm(has_many = "super::nft_transfers::Entity")]
    NftTransfers,
    #[sea_orm(has_many = "super::update_histories::Entity")]
    UpdateHistories,
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collections.def()
    }
}

impl Related<super::mint_creators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MintCreators.def()
    }
}

impl Related<super::mint_histories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MintHistories.def()
    }
}

impl Related<super::nft_transfers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NftTransfers.def()
    }
}

impl Related<super::update_histories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UpdateHistories.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    hub_core::before_save_evm_addrs!(owner, address);
}

impl Entity {
    pub fn find_by_id_with_collection(id: Uuid) -> SelectTwo<Self, collections::Entity> {
        Self::find()
            .join(JoinType::InnerJoin, Relation::Collections.def())
            .select_also(collections::Entity)
            .filter(Column::Id.eq(id))
    }

    pub fn filter_by_collection(id: Uuid) -> Select<Self> {
        Self::find().filter(
            Column::CollectionId
                .eq(id)
                .and(Column::CreationStatus.ne(CreationStatus::Queued)),
        )
    }
}

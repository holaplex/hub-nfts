//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use async_graphql::{ComplexObject, Context, Result, SimpleObject};
use sea_orm::entity::prelude::*;

use super::{metadata_jsons, sea_orm_active_enums::CreationStatus};
use crate::{objects::Collection, AppContext};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "collection_mints")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub collection_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub address: String,
    #[sea_orm(column_type = "Text")]
    pub owner: String,
    pub creation_status: CreationStatus,
    pub created_by: Uuid,
    pub created_at: DateTime,
    pub signature: Option<String>,
}

#[derive(Clone, Debug, PartialEq, Eq, SimpleObject)]
#[graphql(complex)]
pub struct CollectionMint {
    pub id: Uuid,
    pub collection_id: Uuid,
    pub address: String,
    pub owner: String,
    pub creation_status: CreationStatus,
    pub created_by: Uuid,
    pub created_at: DateTime,
    pub signature: Option<String>,
}

#[ComplexObject]
impl CollectionMint {
    async fn collection(&self, ctx: &Context<'_>) -> Result<Option<Collection>> {
        let AppContext {
            collection_loader, ..
        } = ctx.data::<AppContext>()?;

        collection_loader.load_one(self.collection_id).await
    }

    /// The metadata json associated to the collection.
    /// ## References
    /// [Metaplex v1.1.0 Standard](https://docs.metaplex.com/programs/token-metadata/token-standard)
    async fn metadata_json(&self, ctx: &Context<'_>) -> Result<Option<metadata_jsons::Model>> {
        let AppContext {
            metadata_json_loader,
            ..
        } = ctx.data::<AppContext>()?;

        metadata_json_loader.load_one(self.id).await
    }
}

impl From<Model> for CollectionMint {
    fn from(
        Model {
            id,
            collection_id,
            address,
            owner,
            creation_status,
            created_by,
            created_at,
            signature,
        }: Model,
    ) -> Self {
        Self {
            id,
            collection_id,
            address,
            owner,
            creation_status,
            created_by,
            created_at,
            signature,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collections::Entity",
        from = "Column::CollectionId",
        to = "super::collections::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Collections,
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collections.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

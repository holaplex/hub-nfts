//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::{entity::prelude::*, Set};

/// A record of a transfer of an NFT.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "nft_transfers")]
pub struct Model {
    /// The ID of the NFT transfer.
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    /// The transaction signature of the transfer.
    pub tx_signature: Option<String>,
    /// The ID of the NFT that was transferred.
    pub collection_mint_id: Uuid,
    /// The wallet address of the sender.
    pub sender: String,
    /// The wallet address of the recipient.
    pub recipient: String,
    /// The date and time when the transfer was created.
    pub created_at: DateTimeWithTimeZone,
}

impl ActiveModelBehavior for ActiveModel {
    /// Will be triggered before insert / update
    fn before_save(mut self, _insert: bool) -> Result<Self, DbErr> {
        if self.sender.as_ref().starts_with("0x") {
            self.sender = Set(self.sender.as_ref().to_lowercase());
        }

        if self.recipient.as_ref().starts_with("0x") {
            self.recipient = Set(self.recipient.as_ref().to_lowercase());
        }

        Ok(self)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collection_mints::Entity",
        from = "Column::CollectionMintId",
        to = "super::collection_mints::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    CollectionMints,
}

impl Related<super::collection_mints::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectionMints.def()
    }
}

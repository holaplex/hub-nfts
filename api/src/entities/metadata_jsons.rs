//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use async_graphql::{ComplexObject, Context, Result, SimpleObject};
use sea_orm::entity::prelude::*;

use super::metadata_json_attributes;
use crate::AppContext;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "metadata_jsons")]
#[graphql(complex, concrete(name = "MetadataJson", params()))]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub collection_id: Uuid,
    pub identifier: String,
    pub name: String,
    pub uri: String,
    pub symbol: String,
    pub description: String,
    pub image: String,
    pub animation_url: Option<String>,
    pub external_url: Option<String>,
}

#[ComplexObject]
impl Model {
    async fn attributes(
        &self,
        ctx: &Context<'_>,
    ) -> Result<Option<Vec<metadata_json_attributes::Model>>> {
        let AppContext {
            metadata_json_attributes_loader,
            ..
        } = ctx.data::<AppContext>()?;

        metadata_json_attributes_loader
            .load_one(self.collection_id)
            .await
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collections::Entity",
        from = "Column::CollectionId",
        to = "super::collections::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Collections,
    #[sea_orm(has_many = "super::metadata_json_attributes::Entity")]
    MetadataJsonAttributes,
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collections.def()
    }
}

impl Related<super::metadata_json_attributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataJsonAttributes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
